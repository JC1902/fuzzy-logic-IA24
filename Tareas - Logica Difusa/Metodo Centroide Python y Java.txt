# Function to compute centroid defuzzification
def centroid_defuzzification(x_values, membership_values):
    numerator = sum(x * mu for x, mu in zip(x_values, membership_values))
    denominator = sum(membership_values)
    if denominator != 0:
        centroid = numerator / denominator
        return centroid
    else:
        return None  # Handle division by zero if necessary


membership_function = [0.5, 2.0, 0.05, 0.15, 0.15, 0.15]
universe_of_discourse = [2.333, 5, 7.166, 7.25, 7.75, 8.333]

centroide = centroid_defuzzification( universe_of_discourse, membership_function)
print(" centroide ", round(centroide, 6))

"""
import java.util.*;

public class Main {
    
    public static double defuzzificacion_centroide( double[] x_values, double[] valores_membresia ) {
        
        double numerador = 0.0;
        double denominador = 0.0;
        
        for( int i = 0; i < x_values.length; i++ ) {
            numerador += x_values[i] * valores_membresia[i];
            denominador += valores_membresia[i];
        }
        
        if (denominador != 0) {
            double centroid = numerador / denominador;
            return centroid;
        } else {
            return Double.NaN; // Manejar la divisiÃ³n por cero si es necesario
        }
        
    }
    
    public static void main(String[] args) throws Exception {
        
        double[] membership_function = {0.5, 2.0, 0.05, 0.15, 0.15, 0.15};
        double[] universe_of_discourse = {2.333, 5, 7.166, 7.25, 7.75, 8.333};
        
        double centroide = Main.defuzzificacion_centroide( universe_of_discourse, membership_function );
        
        System.out.println("" + centroide);
        
    }
}
"""
